-- TASK 3: Analytical Queries

-- 1. Revenue Analysis:
-- Calculate the total revenue generated by the e-commerce platform.
-- This query calculates the total revenue by summing up the product of the price and quantity columns from the Order_Items table.
SELECT SUM(price * quantity) AS total_revenue
FROM Order_Items;



-- Find the revenue generated per product.
-- This query joins the Order_Items and Products tables to retrieve product names, groups the data by `product_id` and `product_name`, 
-- calculates the total revenue for each product by summing `price * quantity`, and orders the results in descending order to highlight the most profitable products.
SELECT 
	p.product_id,
    p.product_name,
    SUM(oi.price * oi.quantity) AS revenue
FROM Order_Items oi
JOIN Products p ON oi.product_id = p.product_id
GROUP BY p.product_id, p.product_name
ORDER BY revenue DESC;


-- 2. Customer Insights:
-- List the top 5 customers by total spending.
SELECT 
    c.customer_id,
    c.name,
    c.email,
    SUM(o.total_amount) AS total_spending
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.name, c.email
ORDER BY total_spending DESC
LIMIT 5;


-- Identify customers who havenâ€™t made any purchases.
SELECT 
    c.customer_id,
    c.name,
    c.email
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id
WHERE o.order_id IS NULL;


-- 3. Product Trends:
-- Find the top 3 best-selling products.
SELECT 
    p.product_name,
    SUM(oi.quantity) AS total_quantity_sold
FROM Order_Items oi
JOIN Products p ON oi.product_id = p.product_id
GROUP BY p.product_id, p.product_name
ORDER BY total_quantity_sold DESC
LIMIT 3;


-- Identify products that are out of stock.
SELECT 
    product_id,
    product_name,
    category
FROM Products
WHERE stock_quantity = 0;


-- 4. Order Details:
-- Retrieve all items in a specific order, including product names, quantities, and prices.
SELECT 
    oi.order_item_id,
    p.product_name,
    oi.quantity,
    oi.price
FROM Order_Items oi
JOIN Products p ON oi.product_id = p.product_id
WHERE oi.order_id = 9; -- specific order id of 9


-- Calculate the total amount of an order.
SELECT 
    oi.order_id,
    SUM(oi.price * oi.quantity) AS total_amount
FROM Order_Items oi
WHERE oi.order_id = 9 -- specific order id of 9
GROUP BY oi.order_id;


-- 5. Monthly Trends:
-- Calculate the number of orders and total revenue for each month.
SELECT 
    TO_CHAR(o.order_date, 'YYYY-MM') AS month,   					 -- Format the order_date to 'YYYY-MM'
    TO_CHAR(o.order_date, 'Month') AS month_name,
    COUNT(o.order_id) AS total_orders,           					 -- Count the number of orders
    SUM(oi.price * oi.quantity) AS total_revenue 					 -- Calculate the total revenue
FROM Orders o
JOIN Order_Items oi ON o.order_id = oi.order_id  					 -- Join Orders and Order_Items to aggregate revenue
GROUP BY 
	TO_CHAR(o.order_date, 'YYYY-MM'), TO_CHAR(o.order_date, 'Month') -- Group by the formatted month
ORDER BY month;







